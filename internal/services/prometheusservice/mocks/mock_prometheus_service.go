// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/prometheusservice (interfaces: PrometheusServiceInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_prometheus_service.go -package=prometheusservice github.com/motain/of-catalog/internal/services/prometheusservice PrometheusServiceInterface
//

// Package prometheusservice is a generated GoMock package.
package prometheusservice

import (
	reflect "reflect"
	time "time"

	model "github.com/prometheus/common/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPrometheusServiceInterface is a mock of PrometheusServiceInterface interface.
type MockPrometheusServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockPrometheusServiceInterfaceMockRecorder is the mock recorder for MockPrometheusServiceInterface.
type MockPrometheusServiceInterfaceMockRecorder struct {
	mock *MockPrometheusServiceInterface
}

// NewMockPrometheusServiceInterface creates a new mock instance.
func NewMockPrometheusServiceInterface(ctrl *gomock.Controller) *MockPrometheusServiceInterface {
	mock := &MockPrometheusServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPrometheusServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusServiceInterface) EXPECT() *MockPrometheusServiceInterfaceMockRecorder {
	return m.recorder
}

// InstantQuery mocks base method.
func (m *MockPrometheusServiceInterface) InstantQuery(queryString string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstantQuery", queryString)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstantQuery indicates an expected call of InstantQuery.
func (mr *MockPrometheusServiceInterfaceMockRecorder) InstantQuery(queryString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantQuery", reflect.TypeOf((*MockPrometheusServiceInterface)(nil).InstantQuery), queryString)
}

// RangeQuery mocks base method.
func (m *MockPrometheusServiceInterface) RangeQuery(queryString string, start, end time.Time, step time.Duration) (model.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeQuery", queryString, start, end, step)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RangeQuery indicates an expected call of RangeQuery.
func (mr *MockPrometheusServiceInterfaceMockRecorder) RangeQuery(queryString, start, end, step any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeQuery", reflect.TypeOf((*MockPrometheusServiceInterface)(nil).RangeQuery), queryString, start, end, step)
}
