// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/compassservice (interfaces: CompassServiceInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_compass_service.go -package=compassservice github.com/motain/of-catalog/internal/services/compassservice CompassServiceInterface
//

// Package compassservice is a generated GoMock package.
package compassservice

import (
	context "context"
	reflect "reflect"

	compassservice "github.com/motain/of-catalog/internal/services/compassservice"
	dtos "github.com/motain/of-catalog/internal/services/compassservice/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockCompassServiceInterface is a mock of CompassServiceInterface interface.
type MockCompassServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCompassServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockCompassServiceInterfaceMockRecorder is the mock recorder for MockCompassServiceInterface.
type MockCompassServiceInterfaceMockRecorder struct {
	mock *MockCompassServiceInterface
}

// NewMockCompassServiceInterface creates a new mock instance.
func NewMockCompassServiceInterface(ctrl *gomock.Controller) *MockCompassServiceInterface {
	mock := &MockCompassServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCompassServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompassServiceInterface) EXPECT() *MockCompassServiceInterfaceMockRecorder {
	return m.recorder
}

// GetCompassCloudId mocks base method.
func (m *MockCompassServiceInterface) GetCompassCloudId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompassCloudId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCompassCloudId indicates an expected call of GetCompassCloudId.
func (mr *MockCompassServiceInterfaceMockRecorder) GetCompassCloudId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompassCloudId", reflect.TypeOf((*MockCompassServiceInterface)(nil).GetCompassCloudId))
}

// Run mocks base method.
func (m *MockCompassServiceInterface) Run(ctx context.Context, query string, variables map[string]any, response any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, query, variables, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCompassServiceInterfaceMockRecorder) Run(ctx, query, variables, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCompassServiceInterface)(nil).Run), ctx, query, variables, response)
}

// RunWithDTOs mocks base method.
func (m *MockCompassServiceInterface) RunWithDTOs(ctx context.Context, input compassservice.InputDTOInterface, output compassservice.OutputDTOInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithDTOs", ctx, input, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithDTOs indicates an expected call of RunWithDTOs.
func (mr *MockCompassServiceInterfaceMockRecorder) RunWithDTOs(ctx, input, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithDTOs", reflect.TypeOf((*MockCompassServiceInterface)(nil).RunWithDTOs), ctx, input, output)
}

// SendAPISpecifications mocks base method.
func (m *MockCompassServiceInterface) SendAPISpecifications(ctx context.Context, input dtos.APISpecificationsInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAPISpecifications", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAPISpecifications indicates an expected call of SendAPISpecifications.
func (mr *MockCompassServiceInterfaceMockRecorder) SendAPISpecifications(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAPISpecifications", reflect.TypeOf((*MockCompassServiceInterface)(nil).SendAPISpecifications), ctx, input)
}

// SendMetric mocks base method.
func (m *MockCompassServiceInterface) SendMetric(ctx context.Context, body map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetric", ctx, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetric indicates an expected call of SendMetric.
func (mr *MockCompassServiceInterfaceMockRecorder) SendMetric(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetric", reflect.TypeOf((*MockCompassServiceInterface)(nil).SendMetric), ctx, body)
}
