// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/compassservice (interfaces: HTTPClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_http_client.go -package=compassservice github.com/motain/of-catalog/internal/services/compassservice HTTPClientInterface
//

// Package compassservice is a generated GoMock package.
package compassservice

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClientInterface is a mock of HTTPClientInterface interface.
type MockHTTPClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientInterfaceMockRecorder
	isgomock struct{}
}

// MockHTTPClientInterfaceMockRecorder is the mock recorder for MockHTTPClientInterface.
type MockHTTPClientInterfaceMockRecorder struct {
	mock *MockHTTPClientInterface
}

// NewMockHTTPClientInterface creates a new mock instance.
func NewMockHTTPClientInterface(ctrl *gomock.Controller) *MockHTTPClientInterface {
	mock := &MockHTTPClientInterface{ctrl: ctrl}
	mock.recorder = &MockHTTPClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientInterface) EXPECT() *MockHTTPClientInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClientInterface) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientInterfaceMockRecorder) Do(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClientInterface)(nil).Do), arg0)
}
