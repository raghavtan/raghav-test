// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/githubservice (interfaces: GitHubRepositoriesInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_github_client.go -package=githubservice github.com/motain/of-catalog/internal/services/githubservice GitHubRepositoriesInterface
//

// Package githubservice is a generated GoMock package.
package githubservice

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v58/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGitHubRepositoriesInterface is a mock of GitHubRepositoriesInterface interface.
type MockGitHubRepositoriesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubRepositoriesInterfaceMockRecorder
	isgomock struct{}
}

// MockGitHubRepositoriesInterfaceMockRecorder is the mock recorder for MockGitHubRepositoriesInterface.
type MockGitHubRepositoriesInterfaceMockRecorder struct {
	mock *MockGitHubRepositoriesInterface
}

// NewMockGitHubRepositoriesInterface creates a new mock instance.
func NewMockGitHubRepositoriesInterface(ctrl *gomock.Controller) *MockGitHubRepositoriesInterface {
	mock := &MockGitHubRepositoriesInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubRepositoriesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubRepositoriesInterface) EXPECT() *MockGitHubRepositoriesInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGitHubRepositoriesInterface) Get(ctx context.Context, owner, repo string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, owner, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGitHubRepositoriesInterfaceMockRecorder) Get(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGitHubRepositoriesInterface)(nil).Get), ctx, owner, repo)
}

// GetContents mocks base method.
func (m *MockGitHubRepositoriesInterface) GetContents(ctx context.Context, owner, repo, path string, opts *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", ctx, owner, repo, path, opts)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].([]*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContents indicates an expected call of GetContents.
func (mr *MockGitHubRepositoriesInterfaceMockRecorder) GetContents(ctx, owner, repo, path, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockGitHubRepositoriesInterface)(nil).GetContents), ctx, owner, repo, path, opts)
}
