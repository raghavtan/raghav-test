// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/githubservice (interfaces: GitHubServiceInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_github_service.go -package=githubservice github.com/motain/of-catalog/internal/services/githubservice GitHubServiceInterface
//

// Package githubservice is a generated GoMock package.
package githubservice

import (
	reflect "reflect"

	github "github.com/google/go-github/v58/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGitHubServiceInterface is a mock of GitHubServiceInterface interface.
type MockGitHubServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGitHubServiceInterfaceMockRecorder is the mock recorder for MockGitHubServiceInterface.
type MockGitHubServiceInterfaceMockRecorder struct {
	mock *MockGitHubServiceInterface
}

// NewMockGitHubServiceInterface creates a new mock instance.
func NewMockGitHubServiceInterface(ctrl *gomock.Controller) *MockGitHubServiceInterface {
	mock := &MockGitHubServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubServiceInterface) EXPECT() *MockGitHubServiceInterfaceMockRecorder {
	return m.recorder
}

// GetFileContent mocks base method.
func (m *MockGitHubServiceInterface) GetFileContent(repo, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", repo, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockGitHubServiceInterfaceMockRecorder) GetFileContent(repo, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockGitHubServiceInterface)(nil).GetFileContent), repo, path)
}

// GetFileExists mocks base method.
func (m *MockGitHubServiceInterface) GetFileExists(repo, path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileExists", repo, path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileExists indicates an expected call of GetFileExists.
func (mr *MockGitHubServiceInterfaceMockRecorder) GetFileExists(repo, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileExists", reflect.TypeOf((*MockGitHubServiceInterface)(nil).GetFileExists), repo, path)
}

// GetRepo mocks base method.
func (m *MockGitHubServiceInterface) GetRepo(repo string) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockGitHubServiceInterfaceMockRecorder) GetRepo(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockGitHubServiceInterface)(nil).GetRepo), repo)
}

// GetRepoProperties mocks base method.
func (m *MockGitHubServiceInterface) GetRepoProperties(repo string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoProperties", repo)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoProperties indicates an expected call of GetRepoProperties.
func (mr *MockGitHubServiceInterfaceMockRecorder) GetRepoProperties(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoProperties", reflect.TypeOf((*MockGitHubServiceInterface)(nil).GetRepoProperties), repo)
}

// GetRepoURL mocks base method.
func (m *MockGitHubServiceInterface) GetRepoURL(repo string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoURL", repo)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoURL indicates an expected call of GetRepoURL.
func (mr *MockGitHubServiceInterfaceMockRecorder) GetRepoURL(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoURL", reflect.TypeOf((*MockGitHubServiceInterface)(nil).GetRepoURL), repo)
}

// Search mocks base method.
func (m *MockGitHubServiceInterface) Search(repo, query string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", repo, query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockGitHubServiceInterfaceMockRecorder) Search(repo, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGitHubServiceInterface)(nil).Search), repo, query)
}
