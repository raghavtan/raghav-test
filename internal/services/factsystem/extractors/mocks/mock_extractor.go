// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/factsystem/extractors (interfaces: ExtractorInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_extractor.go -package=extractors github.com/motain/of-catalog/internal/services/factsystem/extractors ExtractorInterface
//

// Package extractors is a generated GoMock package.
package extractors

import (
	context "context"
	reflect "reflect"

	dtos "github.com/motain/of-catalog/internal/services/factsystem/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockExtractorInterface is a mock of ExtractorInterface interface.
type MockExtractorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorInterfaceMockRecorder
	isgomock struct{}
}

// MockExtractorInterfaceMockRecorder is the mock recorder for MockExtractorInterface.
type MockExtractorInterfaceMockRecorder struct {
	mock *MockExtractorInterface
}

// NewMockExtractorInterface creates a new mock instance.
func NewMockExtractorInterface(ctrl *gomock.Controller) *MockExtractorInterface {
	mock := &MockExtractorInterface{ctrl: ctrl}
	mock.recorder = &MockExtractorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtractorInterface) EXPECT() *MockExtractorInterfaceMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockExtractorInterface) Extract(ctx context.Context, task *dtos.Task, deps []*dtos.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", ctx, task, deps)
	ret0, _ := ret[0].(error)
	return ret0
}

// Extract indicates an expected call of Extract.
func (mr *MockExtractorInterfaceMockRecorder) Extract(ctx, task, deps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockExtractorInterface)(nil).Extract), ctx, task, deps)
}
